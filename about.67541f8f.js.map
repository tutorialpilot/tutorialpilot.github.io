{"mappings":"AAIA,MAAMA,aACFC,YAAYC,GACVC,KAAKD,GAAKA,EACVC,KAAKC,MAAQ,8BACbD,KAAKE,OAASF,KAAKE,OAAOC,KAAKH,KACjC,CACAI,QAAQC,GACN,MAAMC,EAAUN,KAAKD,GAAGQ,UAClBC,EAASC,KAAKC,IAAIJ,EAAQE,OAAQH,EAAQG,QAC1CG,EAAU,IAAIC,SAAQC,GAAWb,KAAKa,QAAUA,IACtDb,KAAKc,MAAQ,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQO,IAAK,CAC/B,MAAMC,EAAOV,EAAQS,IAAM,GACrBE,EAAKZ,EAAQU,IAAM,GACnBG,EAAQT,KAAKU,MAAsB,GAAhBV,KAAKW,UACxBC,EAAMH,EAAQT,KAAKU,MAAsB,GAAhBV,KAAKW,UACpCpB,KAAKc,MAAMQ,KAAK,CAAEN,OAAMC,KAAIC,QAAOG,OACrC,CAIA,OAHAE,qBAAqBvB,KAAKwB,cAC1BxB,KAAKyB,MAAQ,EACbzB,KAAKE,SACES,CACT,CACAT,SACE,IAAIwB,EAAS,GACTC,EAAW,EACf,IAAK,IAAIZ,EAAI,EAAGa,EAAI5B,KAAKc,MAAMN,OAAQO,EAAIa,EAAGb,IAAK,CACjD,IAAIC,KAAEA,EAAIC,GAAEA,EAAEC,MAAEA,EAAKG,IAAEA,EAAGQ,KAAEA,GAAS7B,KAAKc,MAAMC,GAC5Cf,KAAKyB,OAASJ,GAChBM,IACAD,GAAUT,GACDjB,KAAKyB,OAASP,KAClBW,GAAQpB,KAAKW,SAAW,OAC3BS,EAAO7B,KAAK8B,aACZ9B,KAAKc,MAAMC,GAAGc,KAAOA,GAEvBH,GAAU,qBAAqBG,YAE/BH,GAAUV,CAEd,CACAhB,KAAKD,GAAGgC,UAAYL,EAChBC,IAAa3B,KAAKc,MAAMN,OAC1BR,KAAKa,WAELb,KAAKwB,aAAeQ,sBAAsBhC,KAAKE,QAC/CF,KAAKyB,QAET,CACAK,aACE,OAAO9B,KAAKC,MAAMQ,KAAKU,MAAMV,KAAKW,SAAWpB,KAAKC,MAAMO,QAC1D,EAOF,MAAMyB,QAAU,CAChB,SACA,iCACA,wCACA,yCACA,2CACA,mDACA,2CAGMlC,GAAKmC,SAASC,cAAc,UAC5BC,GAAK,IAAIvC,aAAaE,IAE5B,IAAIsC,QAAU,EACd,MAAMC,KAAO,KACXF,GAAGhC,QAAQ6B,QAAQI,UAAUE,MAAK,KAChCC,WAAWF,KAAM,QAEnBD,SAAWA,QAAU,GAAKJ,QAAQzB,MAAM,EAG1C8B","sources":["txtscrambled.js"],"sourcesContent":["// ——————————————————————————————————————————————————\r\n// TextScramble\r\n// ——————————————————————————————————————————————————\r\n\r\nclass TextScramble {\r\n    constructor(el) {\r\n      this.el = el;\r\n      this.chars = '!<>-_\\\\/[]{}—=+*^?#________';\r\n      this.update = this.update.bind(this);\r\n    }\r\n    setText(newText) {\r\n      const oldText = this.el.innerText;\r\n      const length = Math.max(oldText.length, newText.length);\r\n      const promise = new Promise(resolve => this.resolve = resolve);\r\n      this.queue = [];\r\n      for (let i = 0; i < length; i++) {\r\n        const from = oldText[i] || '';\r\n        const to = newText[i] || '';\r\n        const start = Math.floor(Math.random() * 40);\r\n        const end = start + Math.floor(Math.random() * 40);\r\n        this.queue.push({ from, to, start, end });\r\n      }\r\n      cancelAnimationFrame(this.frameRequest);\r\n      this.frame = 0;\r\n      this.update();\r\n      return promise;\r\n    }\r\n    update() {\r\n      let output = '';\r\n      let complete = 0;\r\n      for (let i = 0, n = this.queue.length; i < n; i++) {\r\n        let { from, to, start, end, char } = this.queue[i];\r\n        if (this.frame >= end) {\r\n          complete++;\r\n          output += to;\r\n        } else if (this.frame >= start) {\r\n          if (!char || Math.random() < 0.28) {\r\n            char = this.randomChar();\r\n            this.queue[i].char = char;\r\n          }\r\n          output += `<span class=\"dud\">${char}</span>`;\r\n        } else {\r\n          output += from;\r\n        }\r\n      }\r\n      this.el.innerHTML = output;\r\n      if (complete === this.queue.length) {\r\n        this.resolve();\r\n      } else {\r\n        this.frameRequest = requestAnimationFrame(this.update);\r\n        this.frame++;\r\n      }\r\n    }\r\n    randomChar() {\r\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\r\n    }}\r\n  \r\n  \r\n  // ——————————————————————————————————————————————————\r\n  // Example\r\n  // ——————————————————————————————————————————————————\r\n  \r\n  const phrases = [\r\n  'Hello,',\r\n  'this is where innovation meets',\r\n  'creativity and dreams become reality.',\r\n  'We\\'re a team of passionate individuals',\r\n  'dedicated to bringing your ideas to life',\r\n  'with our expertise and commitment to excellence.',\r\n  'Let\\'s build something amazing together!'];\r\n  \r\n  \r\n  const el = document.querySelector('.textt');\r\n  const fx = new TextScramble(el);\r\n  \r\n  let counter = 0;\r\n  const next = () => {\r\n    fx.setText(phrases[counter]).then(() => {\r\n      setTimeout(next, 800);\r\n    });\r\n    counter = (counter + 1) % phrases.length;\r\n  };\r\n  \r\n  next();"],"names":["TextScramble","constructor","el","this","chars","update","bind","setText","newText","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","phrases","document","querySelector","fx","counter","next","then","setTimeout"],"version":3,"file":"about.67541f8f.js.map"}